// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants.LifterConstants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;



/**
 *
 */
public class Lifter extends SubsystemBase {
public static final double lifterSpeed = 0.5;
private WPI_TalonSRX lifterMotor = new WPI_TalonSRX(LifterConstants.kLifterMotorPort);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Lifter() {
        lifterMotor.configFactoryDefault();
        lifterMotor.setInverted(true);
        lifterMotor.setNeutralMode(NeutralMode.Brake);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void lifterUp(){
        lifterMotor.set(ControlMode.PercentOutput, LifterConstants.lifterSpeed);
    }

    public void lifterDown(){
        lifterMotor.set(ControlMode.PercentOutput, -LifterConstants.lifterSpeed);
    }

    public void stop(){
        lifterMotor.set(ControlMode.PercentOutput, 0);
    }

}

