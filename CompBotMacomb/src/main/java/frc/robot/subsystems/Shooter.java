// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants.OIConstants;
import frc.robot.Constants.ShooterConstants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import java.nio.channels.ShutdownChannelGroupException;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shooter extends SubsystemBase {
    
private WPI_TalonFX shooterMotor = new WPI_TalonFX(ShooterConstants.kShooterMotorPort);
private Joystick opJoystick = new Joystick(OIConstants.kOperatorControllerPort);
private double targetHighVel = ShooterConstants.kHighGoalVal;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Shooter() {
        
        shooterMotor.configFactoryDefault();
        shooterMotor.setInverted(true);
        shooterMotor.setNeutralMode(NeutralMode.Coast);
        shooterMotor.configNeutralDeadband(0.001);
        shooterMotor.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor,
        ShooterConstants.kPIDLoopIdx, 
        ShooterConstants.kTimeoutMs);

        shooterMotor.configNominalOutputForward(0, ShooterConstants.kTimeoutMs);
		shooterMotor.configNominalOutputReverse(0, ShooterConstants.kTimeoutMs);
		shooterMotor.configPeakOutputForward(1, ShooterConstants.kTimeoutMs);
		shooterMotor.configPeakOutputReverse(-1, ShooterConstants.kTimeoutMs);
        
        shooterMotor.config_kF(ShooterConstants.kPIDLoopIdx, ShooterConstants.kGains_Velocit.kF, ShooterConstants.kTimeoutMs);
		shooterMotor.config_kP(ShooterConstants.kPIDLoopIdx, ShooterConstants.kGains_Velocit.kP, ShooterConstants.kTimeoutMs);
		shooterMotor.config_kI(ShooterConstants.kPIDLoopIdx, ShooterConstants.kGains_Velocit.kI, ShooterConstants.kTimeoutMs);
		shooterMotor.config_kD(ShooterConstants.kPIDLoopIdx, ShooterConstants.kGains_Velocit.kD, ShooterConstants.kTimeoutMs);
        SmartDashboard.putNumber("Target Vel", targetHighVel);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        double selSenVel = shooterMotor.getSelectedSensorVelocity(ShooterConstants.kPIDLoopIdx); /* position units per 100ms */
        double vel_RotPerSec = (double) selSenVel / 2048 * 10; /* scale per100ms to perSecond */
		double vel_RotPerMin = vel_RotPerSec * 60.0;
        SmartDashboard.putNumber("Shooter RPM", vel_RotPerMin);
        SmartDashboard.putNumber("Shooter VEL", shooterMotor.getSelectedSensorVelocity(ShooterConstants.kPIDLoopIdx));
        SmartDashboard.updateValues();
        targetHighVel = SmartDashboard.getNumber("Target Vel", targetHighVel);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void sliderFire(){
        double sliderVal = -1 * opJoystick.getThrottle();
        sliderVal = map(sliderVal, -1.0, 1.0, 0, 1);
        double targetVelocity_UnitsPer100ms = sliderVal * 6000.0 * 2048.0 / 600.0;
        shooterMotor.set(TalonFXControlMode.Velocity, targetVelocity_UnitsPer100ms);
    }

    public void shootLow(){
        shooterMotor.set(TalonFXControlMode.Velocity, ShooterConstants.kLowGoalVal);
    }

    public void shootHigh(){
        shooterMotor.set(TalonFXControlMode.Velocity, targetHighVel);
    }

    public void stopShoot(){
        shooterMotor.setNeutralMode(NeutralMode.Coast);
        shooterMotor.set(ControlMode.PercentOutput, 0);
    }

    public double map(double x, double in_min, double in_max, double out_min, double out_max) {
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
      }

    

}

